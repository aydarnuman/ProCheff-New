// ProCheff Database Schema
// Comprehensive data model for restaurant AI system

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ================================
// User Management
// ================================

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  role        UserRole @default(CLIENT)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  restaurants Restaurant[]
  offers      Offer[]
  apiKeys     ApiKey[]
  sessions    Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ApiKey {
  id           String   @id @default(cuid())
  userId       String
  name         String
  key          String   @unique
  permissions  String   // JSON string of permissions array
  rateLimit    Int      @default(1000) // requests per hour
  isActive     Boolean  @default(true)
  lastUsedAt   DateTime?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// ================================
// Restaurant & Menu Management
// ================================

model Restaurant {
  id          String @id @default(cuid())
  name        String
  description String?
  cuisine     String?
  address     String?
  phone       String?
  email       String?
  website     String?
  
  // Owner
  ownerId     String
  owner       User   @relation(fields: [ownerId], references: [id])
  
  // Business metrics
  averageCheckAmount Float?
  monthlyRevenue     Float?
  customerCount      Int?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  menus       Menu[]
  offers      Offer[]
  tenders     Tender[]

  @@map("restaurants")
}

model Menu {
  id            String      @id @default(cuid())
  name          String
  description   String?
  type          MenuType    @default(MAIN)
  isActive      Boolean     @default(true)
  
  // Restaurant relation
  restaurantId  String
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // Menu content
  rawText       String?     // Original menu text
  processedData Json?       // Parsed menu data
  
  // Analysis results
  analysisResults Json?     // AI analysis output
  nutritionScore  Float?
  costScore       Float?
  riskScore       Float?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  items         MenuItem[]
  analyses      MenuAnalysis[]

  @@map("menus")
}

model MenuItem {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String?
  
  // Menu relation
  menuId      String
  menu        Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade)
  
  // Nutrition & costs
  calories    Float?
  protein     Float?
  carbs       Float?
  fat         Float?
  materialCost Float?
  laborCost   Float?
  
  // Metadata
  isAvailable Boolean @default(true)
  allergens   String? // JSON string of allergens array
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("menu_items")
}

model MenuAnalysis {
  id        String   @id @default(cuid())
  menuId    String
  menu      Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  
  // Analysis metadata
  type      AnalysisType
  status    AnalysisStatus @default(PENDING)
  
  // Input parameters
  inputData Json
  
  // Results
  results   Json?
  insights  String?
  recommendations String?
  
  // Performance metrics
  processingTime Int? // milliseconds
  accuracy       Float?
  confidence     Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menu_analyses")
}

// ================================
// Offer & Tender Management
// ================================

model Offer {
  id           String   @id @default(cuid())
  tenderId     String
  totalAmount  Float    // Changed from Decimal for SQLite compatibility
  itemsData    Json     // Serialized offer items
  metadata     Json?
  simulationId String   // NOT NULL for idempotent operations - every offer must have simulation
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations - items moved to JSON field, no more OfferItem relation
  tender       Tender       @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  bids         TenderBid[]
  pipelineJobs PipelineJob[]
  users        User[]
  restaurants  Restaurant[]

  // Unique constraint for idempotency - one offer per tender-simulation pair
  @@unique([tenderId, simulationId], name: "offer_tender_simulation")
  @@map("offers")
}

// SLI Metrics for Production Monitoring
model SLIMetric {
  id        String   @id @default(cuid())
  name      String   // SLI name (e.g., 'pipeline_availability')
  value     Float    // Metric value
  timestamp DateTime
  labels    Json?    // Key-value labels for filtering  
  details   Json?    // Additional metric details
  createdAt DateTime @default(now())

  // Index for efficient queries
  @@index([name, timestamp], map: "sli_metrics_name_timestamp_idx")
  @@index([name, timestamp(sort: Desc)], map: "sli_metrics_name_timestamp_desc_idx")
  @@map("sli_metrics")
}

// OfferItem model REMOVED - data now stored in offers.itemsData JSON field

model Tender {
  id            String       @id @default(cuid())
  title         String
  description   String
  
  // Restaurant
  restaurantId  String
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id])
  
  // Tender details
  budget        Float?
  deadline      DateTime
  requirements  Json         // Detailed requirements
  
  // Status
  status        TenderStatus @default(OPEN)
  publishedAt   DateTime?
  closedAt      DateTime?
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Enhanced tracking fields
  shartnameAnalysisId String?
  shartnameAnalysis   ShartnameAnalysis? @relation(fields: [shartnameAnalysisId], references: [id])
  institutionName     String?
  estimatedValue      Float?
  personCount        Int?
  docHash            String?  // For idempotent operations
  
  // Relations
  bids            TenderBid[]
  costSimulations CostSimulation[]
  checklistItems  ChecklistItem[]
  pipelineJobs    PipelineJob[]
  offers          Offer[]

  @@unique([docHash, institutionName, deadline], name: "tender_idempotency")
  @@map("tenders")
}

model TenderBid {
  id        String    @id @default(cuid())
  tenderId  String
  tender    Tender    @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  offerId   String    @unique
  offer     Offer     @relation(fields: [offerId], references: [id])
  
  // Bid details
  bidAmount Float
  proposal  String?
  notes     String?
  
  // Status
  status    BidStatus @default(SUBMITTED)
  rank      Int?      // Evaluation ranking
  score     Float?    // Evaluation score
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("tender_bids")
}

// ================================
// Enums
// ================================

enum UserRole {
  ADMIN
  MANAGER
  CLIENT
  SUPPLIER
}

enum MenuType {
  MAIN
  BREAKFAST
  LUNCH
  DINNER
  DRINKS
  DESSERTS
  SPECIAL
}

enum AnalysisType {
  NUTRITION
  COST
  RISK
  OPTIMIZATION
  COMPETITIVE
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum OfferStatus {
  DRAFT
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum TenderStatus {
  DRAFT
  OPEN
  CLOSED
  AWARDED
  CANCELLED
}

enum BidStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ================================
// PDF Analysis & Structured Data (Faz 1)
// ================================

model ShartnameAnalysis {
  id          String   @id @default(cuid())
  docHash     String   @unique // SHA256 hash for deduplication
  version     String   @default("v1")
  filename    String?
  pages       Int?
  
  // JSON field for structured analysis (ShartnameAnalysisV1)
  analysisJson Json
  
  // Extracted key fields for quick queries
  institutionName     String?
  estimatedValueTry   Float?
  deadline           DateTime?
  personCount        Int?
  
  // Confidence tracking
  overallConfidence  Float?
  needsReview        Boolean @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations (for Faz 2)
  tenders     Tender[]
  
  @@map("shartname_analyses")
}

// ================================
// Cost Simulation & KÄ°K System
// ================================

model CostSimulation {
  id       String @id @default(cuid())
  tenderId String?
  tender   Tender? @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  
  // Simulation data
  inputs   Json  // { persons, meals_per_day, duration_days, portion_specs[], staffing[], etc. }
  outputs  Json  // { material_cost, labor_cost, overhead_cost, maintenance_cost, project_total, recommended_price }
  
  // Metadata
  version       String   @default("1.0")
  confidence    Float?   // 0.0 - 1.0
  docHash       String?  // For idempotent operations
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  pipelineJobs PipelineJob[]
  
  @@unique([tenderId, version], map: "cost_simulation_tender_version")
  @@map("cost_simulations")
}

model ChecklistItem {
  id       String @id @default(cuid())
  tenderId String
  tender   Tender @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  
  // Checklist details
  type     String  // "CERTIFICATE", "EQUIPMENT", "PERSONNEL", "DOCUMENT"
  title    String
  status   ChecklistStatus @default(PENDING)
  
  // Additional info
  description String?
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("checklist_items")
}

// ================================
// Additional Enums
// ================================

enum ChecklistStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  NOT_APPLICABLE
}

// ================================
// Pipeline Job Management (Idempotent Workflow)
// ================================

model PipelineJob {
  id            String           @id @default(cuid())
  docHash       String          // Unique document identifier
  pipelineId    String          @default(cuid()) // Correlation ID for entire pipeline
  step          PipelineStep    // Current step in the pipeline
  status        JobStatus       @default(PENDING)
  
  // References
  tenderId      String?
  tender        Tender?         @relation(fields: [tenderId], references: [id])
  simulationId  String?
  simulation    CostSimulation? @relation(fields: [simulationId], references: [id])
  offerId       String?
  offer         Offer?          @relation(fields: [offerId], references: [id])
  
  // Error handling
  errorCode     String?
  errorMessage  String?
  retryCount    Int            @default(0)
  maxRetries    Int            @default(3)
  
  // Timing
  startedAt     DateTime?
  completedAt   DateTime?
  nextRetryAt   DateTime?
  
  // Metadata
  metadata      Json?          // Step-specific data
  evidence      Json?          // Audit trail
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Unique constraint for exactly-once semantics
  @@unique([docHash, step], name: "pipeline_idempotency")
  @@map("pipeline_jobs")
}

enum PipelineStep {
  ANALYZE_COMPLETED     // PDF analysis done
  TENDER_UPSERTED      // Tender created/updated
  CHECKLIST_DONE       // Checklist items generated
  SIMULATION_DONE      // Cost simulation completed
  OFFER_DRAFTED        // Offer generated
}

enum JobStatus {
  PENDING              // Waiting to start
  RUNNING              // Currently executing
  COMPLETED            // Successfully finished
  FAILED               // Failed (non-retryable)
  CANCELLED            // Cancelled by user/system
  WAITING_INPUT        // Waiting for manual input/prerequisites
  RETRYING             // In retry cycle
}
